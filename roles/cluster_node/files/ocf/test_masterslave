#!/bin/bash
#
#
# OpenStack Neutron Metadata Agent service
#
# Description:  Manages an OpenStack Neutron Metadata Agent process as an HA resource
#
# Authors: Emilien Macchi
# Mainly inspired by the Nova Network resource agent written by Emilien Macchi & Sebastien Han
#
# Support:      openstack@lists.launchpad.net
# License:      Apache Software License (ASL) 2.0
#
#
# See usage() function below for more details ...
#
#######################################################################
# Initialization:

: ${OCF_FUNCTIONS_DIR=${OCF_ROOT}/lib/heartbeat}
. ${OCF_FUNCTIONS_DIR}/ocf-shellfuncs

#######################################################################

# Fill in some defaults if no values are specified

PATH=/sbin:/usr/sbin:/bin:/usr/bin

OCF_RESKEY_binary_default="true"
# OCF_RESKEY_config_default="/etc/neutron/neutron.conf"
# OCF_RESKEY_agent_config_default="/etc/neutron/metadata_agent.ini"
# OCF_RESKEY_log_file_default="/var/log/neutron/metadata-agent.log"
# OCF_RESKEY_user_default="neutron"
# OCF_RESKEY_pid_default="$HA_RSCTMP/$OCF_RESOURCE_INSTANCE.pid"
# OCF_RESKEY_debug_default="false"

: ${OCF_RESKEY_binary=${OCF_RESKEY_binary_default}}
# : ${OCF_RESKEY_config=${OCF_RESKEY_config_default}}
# : ${OCF_RESKEY_agent_config=${OCF_RESKEY_agent_config_default}}
# : ${OCF_RESKEY_user=${OCF_RESKEY_user_default}}
# : ${OCF_RESKEY_pid=${OCF_RESKEY_pid_default}}
# : ${OCF_RESKEY_log_file=${OCF_RESKEY_log_file_default}}
# : ${OCF_RESKEY_debug=${OCF_RESKEY_debug_default}}

#######################################################################

usage() {
    cat <<UEND
        usage: $0 (start|stop|validate-all|meta-data|status|monitor)

        $0 manages an OpenStack Neutron Metadata Agent (${OCF_RESKEY_binary}) process as an HA resource

        The 'start' operation starts the networking service.
        The 'stop' operation stops the networking service.
        The 'validate-all' operation reports whether the parameters are valid
        The 'meta-data' operation reports this RA's meta-data information
        The 'status' operation reports whether the networking service is running
        The 'monitor' operation reports whether the networking service seems to be working

UEND
}

meta_data() {
    cat <<END
<?xml version="1.0"?>
<!DOCTYPE resource-agent SYSTEM "ra-api-1.dtd">
<resource-agent name="neutron-metadata-agent">
<version>1.0</version>

<longdesc lang="en">
Resource agent for the OpenStack Neutron Metadata Agent
May manage a neutron-metadata-agent instance or a clone set that
creates a distributed neutron-metadata-agent cluster.
</longdesc>
<shortdesc lang="en">Manages the OpenStack OVS Service (${OCF_RESKEY_binary})</shortdesc>
<parameters>

<parameter name="binary" unique="0" required="0">
<longdesc lang="en">
Location of the Neutron Metadata Agent binary
</longdesc>
<shortdesc lang="en">Neutron Metadata Agent binary</shortdesc>
<content type="string" default="${OCF_RESKEY_binary_default}" />
</parameter>

<parameter name="config" unique="0" required="0">
<longdesc lang="en">
Location of the OpenStack Neutron Service (neutron-server) configuration file
</longdesc>
<shortdesc lang="en">OpenStack OVS Server (neutron-server) config file</shortdesc>
<content type="string" default="${OCF_RESKEY_config_default}" />
</parameter>

<parameter name="agent_config" unique="0" required="0">
<longdesc lang="en">
Location of the OpenStack Neutron Metadata Agent configuration file
</longdesc>
<shortdesc lang="en">OpenStack Neutron Metadata Agent config file</shortdesc>
<content type="string" default="${OCF_RESKEY_agent_config_default}" />
</parameter>

<parameter name="user" unique="0" required="0">
<longdesc lang="en">
User running Neutron Metadata Agent service (${OCF_RESKEY_binary})
</longdesc>
<shortdesc lang="en">OpenStack Neutron Metadata Agent service (${OCF_RESKEY_binary}) user</shortdesc>
<content type="string" default="${OCF_RESKEY_user_default}" />
</parameter>

<parameter name="pid" unique="0" required="0">
<longdesc lang="en">
The pid file to use for this Neutron Metadata Agent service (${OCF_RESKEY_binary}) instance
</longdesc>
<shortdesc lang="en">OpenStack Neutron Metadata Agent service (${OCF_RESKEY_binary}) pid file</shortdesc>
<content type="string" default="${OCF_RESKEY_pid_default}" />
</parameter>

<parameter name="log_file" unique="0" required="0">
<longdesc lang="en">
The log file to use for this OpenStack Metadata Service (${OCF_RESKEY_binary}) instance
</longdesc>
<shortdesc lang="en">OpenStack Metadata Service (${OCF_RESKEY_binary}) log file</shortdesc>
<content type="string" default="${OCF_RESKEY_log_file_default}" />
</parameter>

<parameter name="debug" unique="0" required="0">
<longdesc lang="en">
The debug flag for  OpenStack Metadata Service (${OCF_RESKEY_binary}) instance
</longdesc>
<shortdesc lang="en">OpenStack Metadata Service (${OCF_RESKEY_binary}) debug flag</shortdesc>
<content type="boolean" default="${OCF_RESKEY_debug_default}" />
</parameter>

</parameters>

<actions>
<action name="start" timeout="20" />
<action name="stop" timeout="20" />
<action name="status" timeout="20" />
<action name="monitor" depth="0" timeout="30" interval="20" />
<action name="monitor" depth="0" timeout="30" interval="13" role="Master"/>
<action name="promote" timeout="120" />
<action name="demote"  timeout="120" />
<action name="notify"   timeout="90" />
<action name="validate-all" timeout="5" />
<action name="meta-data" timeout="5" />
</actions>
</resource-agent>
END
#<action name="methods" timeout="5" />
}

# get_worker_pid() {
#     pid=`pgrep -u ${OCF_RESKEY_user} -fol ${OCF_RESKEY_binary} | grep -E  "python\s+\/usr\/bin" | awk '{print $1}'`
#     echo $pid
# }

#######################################################################
# Functions invoked by resource manager actions

agent_validate() {
    # d=`date '+%Y%m%d %H:%M:%S'`
    # echo "$d  [validate]  nothing to do" >> /tmp/ms.log
    return $OCF_SUCCESS
}


agent_status() {
    local pid
    local f_pid
    local rc

    #pid=`get_worker_pid`
    if [ -f /tmp/ms_good ] ; then
        return $OCF_SUCCESS
    fi

    # d=`date '+%Y%m%d %H:%M:%S'`
    # echo "$d  [status]  OCF_ERR_GENERIC=$OCF_ERR_GENERIC" >> /tmp/ms.log
    return $OCF_NOT_RUNNING
}


agent_monitor() {
    agent_status
    rc=$?

    d=`date '+%Y%m%d %H:%M:%S'`
    if [ "$rc" == "$OCF_SUCCESS" -a -e /tmp/ms_master ] ; then
        rc=$OCF_RUNNING_MASTER
    fi

    if [ ! -f /tmp/ms_score ] ; then
        echo 0 > /tmp/ms_score
    fi

    sk=`cat /tmp/ms_score`
    crm_master -l reboot -v $sk
    echo "$d  [monitor]  rc=$rc  SetScore:$sk" >> /tmp/ms.log

    return $rc
}


agent_notify() {
    agent_monitor
    rc=$?

    d=`date '+%Y%m%d %H:%M:%S'`
    echo "$d  [$OCF_RESKEY_CRM_notify_type $OCF_RESKEY_CRM_notify_operation]  start=$OCF_RESKEY_CRM_notify_start_uname stop=$OCF_RESKEY_CRM_notify_stop_uname curr_master=$OCF_RESKEY_CRM_notify_master_uname promote=$OCF_RESKEY_CRM_notify_promote_uname demote=$OCF_RESKEY_CRM_notify_demote_uname" >> /tmp/ms.log

    #return $rc
    return $OCF_SUCCESS
}


agent_start() {
    local rc
    local alr
    agent_status
    rc=$?

    if [ "$rc" == "$OCF_SUCCESS" ] ; then
        alr='Already_started'
        #return $OCF_SUCCESS
    fi

    echo > /tmp/ms_good

    d=`date '+%Y%m%d %H:%M:%S'`
    echo "$d  [start]  rc=$rc  $alr" >> /tmp/ms.log
    return $OCF_SUCCESS
}


agent_stop() {
    local rc
    local pid
    local alr

    agent_status
    rc=$?
    if [ $rc -eq $OCF_NOT_RUNNING ]; then
        alr='Already_started'
        #return $OCF_SUCCESS
    fi

    rm -f /tmp/ms_good

    # remove master score
    crm_master -l reboot -D

    d=`date '+%Y%m%d %H:%M:%S'`
    echo "$d  [stop]  rc=$rc  $alr" >> /tmp/ms.log
    return $OCF_SUCCESS
}

#######################################################################
agent_promote() {
    local rc
    local pid

    agent_monitor
    rc=$?

    d=`date '+%Y%m%d %H:%M:%S'`
    env >> /tmp/env-`echo $d | sed s/[\ \:]//g`
    case "$rc" in
        "$OCF_SUCCESS")
            # Running as slave. Normal, expected behavior.
            ocf_log debug "Resource is currently running as Slave"
            ;;
        "$OCF_RUNNING_MASTER")
            # Already a master. Unexpected, but not a problem.
            ocf_log info "Resource is already running as Master"
            echo "$d  [promote]  rc=$rc  Already_master" >> /tmp/ms.log
            return $OCF_SUCCESS
            ;;
        "$OCF_NOT_RUNNING")
            # Currently not running. Need to start before promoting.
            ocf_log info "Resource is currently not running"
            agent_start
            ;;
        *)
            # Failed resource. Let the cluster manager recover.
            ocf_log err "Unexpected error, cannot promote"
            exit $rc
            ;;
    esac

    # transform slave agent to master
    echo > /tmp/ms_master

    echo "$d  [promote]  rc=$rc" >> /tmp/ms.log
    return $OCF_SUCCESS
}


agent_demote() {
    local rc
    local pid

    agent_monitor
    rc=$?
    d=`date '+%Y%m%d %H:%M:%S'`
    env >> /tmp/env-`echo $d | sed s/[\ \:]//g`
    case "$rc" in
        "$OCF_RUNNING_MASTER")
            # Running as master. Normal, expected behavior.
            ocf_log debug "Resource is currently running as Master"
            ;;
        "$OCF_SUCCESS")
            # Alread running as slave. Nothing to do.
            ocf_log debug "Resource is currently running as Slave"
            echo "$d  [demote]  rc=$rc  Already_slave" >> /tmp/ms.log
            return $OCF_SUCCESS
            ;;
        "$OCF_NOT_RUNNING")
            # Currently not running. Getting a demote action
            # in this state is unexpected. Exit with an error
            # and let the cluster manager recover.
            ocf_log err "Resource is currently not running"
            echo "$d  [demote]  rc=$rc  Resource_not_running  Emergency_exit" >> /tmp/ms.log
            exit $OCF_ERR_GENERIC
            ;;
        *)
            # Failed resource. Let the cluster manager recover.
            ocf_log err "Unexpected error, cannot demote"
            exit $rc
            ;;
    esac

    # transform slave agent to master
    rm -f /tmp/ms_master

    echo "$d  [demote]  rc=$rc" >> /tmp/ms.log
    return $OCF_SUCCESS
}
#######################################################################

case "$1" in
  meta-data)    meta_data
                exit $OCF_SUCCESS;;
  usage|help)   usage
                exit $OCF_SUCCESS;;
esac

# Anything except meta-data and help must pass validation
agent_validate || exit $?

# What kind of method was invoked?
case "$1" in
  start)        agent_start;;
  stop)         agent_stop;;
  status)       agent_status;;
  monitor)      agent_monitor;;
  validate)     agent_validate;;
  promote)      agent_promote;;
  demote)       agent_demote;;
  notify)       agent_notify;;
  validate-all) agent_validate;;
  *)            usage
                exit $OCF_ERR_UNIMPLEMENTED;;
esac
